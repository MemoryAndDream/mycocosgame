{"version":3,"sources":["..\\..\\..\\..\\assets\\scripts/assets\\scripts\\Player.js"],"names":["cc","Class","extends","Component","properties","jumpHeight","jumpDuration","maxMoveSpeed","accel","jumpAudio","default","url","AudioClip","YSpeed","g","a","fall_state","playJumpSound","audioEngine","playEffect","setInputControl","self","eventManager","addListener","event","EventListener","KEYBOARD","onKeyPressed","keyCode","KEY","accLeft","accRight","d","onKeyReleased","node","onLoad","xSpeed","manager","director","getCollisionManager","enabled","enabledDebugDraw","onCollisionEnter","other","anim","getComponent","Animation","animState","play","update","dt","Math","abs","x","fall","getPosition","y","action","moveBy","p","runAction"],"mappings":"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","file":"Player.js","sourceRoot":"..\\..\\..\\..\\assets\\scripts","sourcesContent":["cc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // 主角跳跃高度\r\n        jumpHeight: 0,\r\n        // 主角跳跃持续时间\r\n        jumpDuration: 0,\r\n        // 最大移动速度\r\n        maxMoveSpeed: 0,\r\n        // 加速度\r\n        accel: 0,\r\n        // 跳跃音效资源\r\n        jumpAudio: {\r\n            default: null,\r\n            url: cc.AudioClip\r\n        },\r\n        YSpeed : 20,\r\n\t\tg:50,\r\n        a:50,\r\n        fall_state:true\r\n    },\r\n\r\n\r\n\r\n    playJumpSound: function () {\r\n        // 调用声音引擎播放声音\r\n        cc.audioEngine.playEffect(this.jumpAudio, false);\r\n    },\r\n\r\n    setInputControl: function () {\r\n        var self = this;\r\n        //add keyboard input listener to jump, turnLeft and turnRight\r\n        cc.eventManager.addListener({\r\n            event: cc.EventListener.KEYBOARD,\r\n            // set a flag when key pressed\r\n            onKeyPressed: function(keyCode, event) {\r\n                switch(keyCode) {\r\n                    case cc.KEY.a:\r\n                        self.accLeft = true;\r\n                        self.accRight = false;\r\n                        break;\r\n                    case cc.KEY.d:\r\n                        self.accLeft = false;\r\n                        self.accRight = true;\r\n                        break;\r\n                }\r\n            },\r\n            // unset a flag when key released\r\n            onKeyReleased: function(keyCode, event) {\r\n                switch(keyCode) {\r\n                    case cc.KEY.a:\r\n                        self.accLeft = false;\r\n                        break;\r\n                    case cc.KEY.d:\r\n                        self.accRight = false;\r\n                        break;\r\n                }\r\n            }\r\n        }, self.node);\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        \r\n        // 设置循环模式为 Loop\r\n       // animState.wrapMode = cc.WrapMode.Loop;\r\n       // console.log(\"play\")\r\n\r\n        // 加速度方向开关\r\n        this.accLeft = false;\r\n        this.accRight = false;\r\n        // 主角当前水平方向速度\r\n        this.xSpeed = 0;\r\n\r\n        // 初始化键盘输入监听\r\n        this.setInputControl();\r\n\r\n        var manager = cc.director.getCollisionManager();\r\n        manager.enabled = true;\r\n        manager.enabledDebugDraw = true;\r\n    },\r\n\r\n    onCollisionEnter: function (other, self) {//同时有2个碰撞就会掉下去\r\n    this.YSpeed= 0\r\n    var anim = this.getComponent(cc.Animation);\r\n    var animState = anim.play(\"small\");\r\n    this.fall_state=false\r\n},\r\n    // called every frame\r\n    update: function (dt) {\r\n        // 根据当前加速度方向每帧更新速度\r\n        if (this.accLeft) {\r\n            this.xSpeed -= this.accel * dt;\r\n        } else if (this.accRight) {\r\n            this.xSpeed += this.accel * dt;\r\n        }\r\n        // 限制主角的速度不能超过最大值\r\n        if ( Math.abs(this.xSpeed) > this.maxMoveSpeed ) {\r\n            // if speed reach limit, use max speed with current direction\r\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\r\n        }\r\n\r\n        // 根据当前速度更新主角的位置\r\n        this.node.x += this.xSpeed * dt;\r\n\r\n        this.fall(dt)\r\n    },\r\n\r\n    fall: function (dt){\r\n   \r\n\t\tif (this.node.getPosition().y>-120 && this.fall_state)\r\n\t\t{\r\n\tthis.YSpeed-= this.g*dt;}\r\n\tvar action = cc.moveBy(dt, cc.p(0, this.YSpeed*dt));\r\n\tthis.node.runAction(action);\r\n\t\t}\r\n}\r\n\r\n\r\n);\r\n"]}