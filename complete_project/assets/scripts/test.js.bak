// Learn cc.Class:
//  - [Chinese] http://www.cocos.com/docs/creator/scripting/class.html
//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/class/index.html
// Learn Attribute:
//  - [Chinese] http://www.cocos.com/docs/creator/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/reference/attributes/index.html
// Learn life-cycle callbacks:
//  - [Chinese] http://www.cocos.com/docs/creator/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html

cc.Class({
    extends: cc.Component,

    properties: {
        YSpeed : 0, //向上为正
		g:50,
		a:50,
		
    },

    // LIFE-CYCLE CALLBACKS:

     onLoad () {
	 var manager = cc.director.getCollisionManager();
	 manager.enabled = true;
	 manager.enabledDrawBoundingBox = true;
	 manager.enabledDebugDraw = true;
	 // 初始化键盘输入监听
     this.setInputControl();
	 },

    start () {

    },

     update (dt) {
		this.fall(dt)
	 
	 },
  onCollisionEnter: function (other, self) {
    console.log('on collision enter');//动作要重新载入参数？
	this.YSpeed= -this.YSpeed
    // 碰撞系统会计算出碰撞组件在世界坐标系下的相关的值，并放到 world 这个属性里面
    var world = self.world;

    // 碰撞组件的 aabb 碰撞框
    var aabb = world.aabb;

    // 上一次计算的碰撞组件的 aabb 碰撞框
    var preAabb = world.preAabb;

    // 碰撞框的世界矩阵
    var t = world.transform;

    // 以下属性为圆形碰撞组件特有属性
    var r = world.radius;
    var p = world.position;

    // 以下属性为 矩形 和 多边形 碰撞组件特有属性
    var ps = world.points;
},

	fall: function (dt){
	this.YSpeed-= this.g*dt;
	action = cc.moveBy(1, cc.p(0, this.YSpeed*dt));
	this.node.runAction(action);
	
	}

	jump: function (dt){
this.YSpeed+=dt*a
	}
	setInputControl: function () {
        var self = this;
        
        // touch input
        this.node.on('mousedown', function (event) {
           console.log('Mouse down');
		   this.startTime = new Date().getTime()
        }, this);

		this.node.on('mouseup', function (event) {
           console.log('mouseup');
		   lastTime = (new Date().getTime()-this.startTime)/1000
		   console.log('lastTime');
		   this.jump(lastTime)
        }, this);
		


    },
});
